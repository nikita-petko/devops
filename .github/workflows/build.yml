name: Build

on:
  push:
    paths:
      - "services/**"
      - ".github/workflows/build.yml"

    branches:
      - "**"

  workflow_dispatch:
    inputs:
      components:
        description: "The list of components to build"
        required: true
        type: string

      deployable_components:
        description: "The list of components to deploy"
        required: false
        type: string

      build_configuration:
        description: "Build Configuration"
        required: true
        default: "Release"
        type: choice
        options:
          - "Release"
          - "Debug"

      create_release:
        description: "Create Release"
        required: true
        default: true
        type: boolean

      create_image:
        description: "Create Image"
        required: true
        default: true
        type: boolean

      nomad_environment:
        description: "Nomad Environment"
        required: true
        default: "production"
        type: choice
        options:
          - "production"
          - "staging"

      # In the form of "component,cpu:ram;component2,cpu:ram"
      nomad_resources:
        description: "The resources to use when deploying"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  deployments: write

jobs:
  # Allows for a switch between push and workflow_dispatch
  get-component-names:
    runs-on: ubuntu-latest

    if: ${{ github.event_name != 'workflow_dispatch' }}

    outputs:
      components: ${{ steps.parse-commit-message.outputs.components }}
      deployable_components: ${{ steps.parse-commit-message.outputs.deployable_components }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Parse commit message
        id: parse-commit-message
        uses: actions/github-script@v7
        with:
          script: |
            // Head commit matches the following:
            // #!components: component1,component2,component3
            // #!deployable-components: component1,component2,component3
            // component parts of commit messages do not close with !#, to find the end,
            // just read the unti a newline character is found

            const headCommitMessage = '${{ github.event.head_commit.message }}';
            const components = headCommitMessage.match(/#!components: ([a-zA-Z0-9_\-.,]+)/);
            const deployableComponents = headCommitMessage.match(/#!deployable-components: ([a-zA-Z0-9_\-.,]+)/);
            
            return {
              components: components && components[1] || '',
              deployable_components: deployableComponents && deployableComponents[1] || ''
            }

  build:
    if: ${{ !contains(github.event.head_commit.message, '#!skip-build!#') }}

    needs: get-component-names

    runs-on: ubuntu-latest
    env:
      BUILD_CONFIGURATION: ${{ github.event.inputs.build_configuration || (github.event_name == 'push' && github.ref == 'refs/heads/master' && 'Release') || 'Debug' }}

      COMPONENT_NAMES: ${{ (github.event_name == 'push' && needs.get-component-names.outputs.components) || github.event.inputs.components }}

    outputs:
      components: ${{ steps.find-component-directories.outputs.components }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Validate and Find components
        uses: mfdlabs/component-finder-action@v10
        id: find-component-directories
        with:
          components: ${{ env.COMPONENT_NAMES }}
          component-search-directories: services

  # No need for checkout, downloads the component archives from the
  # artifacts of the build job
  upload-artifacts:
    if: ${{ !contains(github.event.head_commit.message, '#!skip-release!#') && !contains(github.event.head_commit.message, '#!skip-image!#') }}

    needs: build

    runs-on: ubuntu-latest

    env:
      CREATE_RELEASE: ${{ github.event.inputs.create_release || !contains(github.event.head_commit.message, '#!skip-release!#') }}
      CREATE_IMAGE: ${{ github.event.inputs.create_image || !contains(github.event.head_commit.message, '#!skip-image!#') }}

      COMPONENT_NAMES: ${{ needs.build.outputs.components }}

    steps:
      - name: Echo Component Names
        run: 'echo "Components: ${{ env.COMPONENT_NAMES }}"'

  
  deploy:
    if: ${{ !contains(github.event.head_commit.message, '#!skip-deploy!#') }}

    needs: 
      - get-component-names
      - build

    runs-on: ubuntu-latest

    env:
      NOMAD_ENVIRONMENT: ${{ github.event.inputs.nomad_environment }}
      NOMAD_SHORT_ENVIRONMENT: ${{ github.event.inputs.nomad_environment == 'production' && 'prod' || 'stage' }}

      NOMAD_RESOURCES: ${{ github.event.inputs.nomad_resources }}

      DEPLOYABLE_COMPONENTS: ${{ (github.event_name == 'push' && needs.get-component-names.outputs.deployable_components) || github.event.inputs.deployable_components }}

    steps:
      - name: Echo Component Names
        run: 'echo "Components: ${{ env.DEPLOYABLE_COMPONENTS }}"'
